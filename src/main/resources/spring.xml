<?xml version="1.0" encoding="UTF-8"?>
<beans
        xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:tx="http://www.springframework.org/schema/tx"
        xmlns:aop="http://www.springframework.org/schema/aop"
        xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-4.0.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-4.0.xsd"
        default-autowire="byName">

    <description>Spring公共配置</description>
    <!-- 定义受环境影响易变的变量 -->
    <context:component-scan base-package="com.war4.pojo"/>
    <bean id="configProperties" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"/>
        <property name="ignoreResourceNotFound" value="true"/>
        <property name="locations">
            <list>
                <!-- 标准配置 -->
                <value>classpath:/jdbc.properties</value>
            </list>
        </property>
    </bean>

    <!-- 使用annotation 自动注册bean,并保证@Required, @Autowired的属性被注入 -->
    <context:component-scan base-package="com.war4"/>

    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>


        <property name="filters" value="stat,log4j,wall" />

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="5"/>
        <property name="minIdle" value="10"/>
        <property name="maxActive" value="20"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>

        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>

        <!--&lt;!&ndash;配置监控统计拦截的filters &ndash;&gt;-->
        <!--<property name="filters" value="stat,log4j" />-->
    </bean>

    <!-- Hibernate配置 -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="namingStrategy">
            <bean class="org.hibernate.cfg.ImprovedNamingStrategy"/>
        </property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
                <prop key="hibernate.jdbc.batch_size">50</prop>
                <prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
            </props>
        </property>


        <!-- 扫描实体bean -->
        <property name="packagesToScan">
            <list>
                <value>com.war4.pojo</value>
                <value>com.war4.vo</value>
            </list>
        </property>
    </bean>

    <!-- 事务管理器配置,单数据源事务 -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    <!-- 使用annotation定义事务 -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
    <!--&lt;!&ndash; 配置事务传播特性 &ndash;&gt;-->
    <!--<tx:advice id="txAdvice" transaction-manager="transactionManager">-->
        <!--<tx:attributes>-->
            <!--&lt;!&ndash;<tx:method name="*" propagation="REQUIRED" read-only="true"></tx:method>&ndash;&gt;-->
            <!--<tx:method name="save*" propagation="REQUIRED"></tx:method>-->
            <!--<tx:method name="create*" propagation="REQUIRED"></tx:method>-->
            <!--<tx:method name="insert*" propagation="REQUIRED"></tx:method>-->
            <!--<tx:method name="add*" propagation="REQUIRED"></tx:method>-->
            <!--<tx:method name="del*" propagation="REQUIRED"></tx:method>-->
            <!--<tx:method name="remove*" propagation="REQUIRED"></tx:method>-->
            <!--<tx:method name="update*" propagation="REQUIRED"></tx:method>-->
            <!--<tx:method name="modify*" propagation="REQUIRED"></tx:method>-->
            <!--<tx:method name="*" propagation="SUPPORTS" read-only="true"></tx:method>-->
        <!--</tx:attributes>-->
    <!--</tx:advice>-->

    <!--<aop:config>-->
        <!--<aop:pointcut id="serviceMethod" expression="execution(* com.war4.service..*.*(..))" />-->
        <!--<aop:advisor pointcut-ref="serviceMethod" advice-ref="txAdvice" />-->
    <!--</aop:config>-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">

        <tx:attributes>

            <!-- name 为 方法名 -->

            <tx:method name="run*" propagation="REQUIRED" />


        </tx:attributes>

    </tx:advice>
    <bean id="logUtil" class="com.war4.util.LogUtil"/>
    <aop:config>
        <aop:pointcut id="logPointcut" expression="execution(* com.war4.service.*Service.*(..))"/>
        <aop:aspect ref="logUtil">
            <aop:after-throwing throwing="ex" method="thirdLog" pointcut-ref="logPointcut"/>
        </aop:aspect>
    </aop:config>

    <bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor"/>

    <bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">
        <property name="patterns">
            <list>
                <value>com.war4.service.*</value>
                <value>com.war4.repository.*</value>
            </list>
        </property>
    </bean>

    <aop:config proxy-target-class="true">
        <aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut" />
    </aop:config>

    <import resource="applicationContext-scheduled.xml" />
    <import resource="applicationContext-mongo.xml" />
    <!--<import resource="applicationContext-mongo-test.xml" />-->

</beans>